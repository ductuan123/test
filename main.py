import requests
import os
import json
from dotenv import load_dotenv

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file config.env
load_dotenv("config.env")

API_BASE = "https://gw.motp.vn/MOTP"


def call_api(endpoint, params):
    """H√†m g·ªçi API chung"""
    try:
        res = requests.get(f"{API_BASE}/{endpoint}", params=params, timeout=10)
        res.raise_for_status()
        data = res.json()

        # N·∫øu Data l√† chu·ªói JSON ‚Üí parse ti·∫øp
        if "Data" in data and isinstance(data["Data"], str):
            try:
                data["Data"] = json.loads(data["Data"])
            except Exception:
                pass
        return data
    except Exception as e:
        return {"error": True, "message": str(e)}


def get_balance():
    """L·∫•y s·ªë d∆∞ t√†i kho·∫£n"""
    token = os.getenv("MOTP_TOKEN")
    if not token:
        return {"error": True, "message": "Thi·∫øu MOTP_TOKEN"}
    return call_api("GetBalance", {"token": token})


def rent_phone_number(service_id=1, type_id=1, phone_number=""):
    """Thu√™ s·ªë ƒëi·ªán tho·∫°i"""
    token = os.getenv("MOTP_TOKEN")
    if not token:
        return {"error": True, "message": "Thi·∫øu MOTP_TOKEN"}

    params = {
        "token": token,
        "serviceID": service_id,
        "type": type_id,
        "phoneNumber": phone_number
    }
    return call_api("RentPhoneNumber", params)


def send_to_telegram(msg: str):
    """G·ª≠i tin nh·∫Øn ƒë·∫øn Telegram"""
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    chat_id = os.getenv("TELEGRAM_CHAT_ID")
    if not bot_token or not chat_id:
        return

    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    requests.post(url, data={"chat_id": chat_id, "text": msg, "parse_mode": "Markdown"})


if __name__ == "__main__":
    message = ""

    # --- L·∫•y s·ªë d∆∞ ---
    balance_result = get_balance()
    if not balance_result.get("error"):
        balance = balance_result.get("Data", {}).get("Balance", "Kh√¥ng r√µ")
        message += f"üí∞ S·ªë d∆∞ t√†i kho·∫£n: *{balance} VND*\n\n"
    else:
        message += f"‚ùå L·ªói khi l·∫•y s·ªë d∆∞: {balance_result['message']}\n\n"

    # --- Thu√™ s·ªë ---
    rent_result = rent_phone_number(service_id=1, type_id=1)

    if not rent_result.get("error"):
        data = rent_result.get("Data")

        if isinstance(data, dict):
            phone = data.get("PhoneNumber", "Kh√¥ng r√µ")
            price = data.get("Price", "Kh√¥ng r√µ")
            expired = data.get("ExpiredTime", "Kh√¥ng r√µ")

            message += "üì± *Thu√™ s·ªë th√†nh c√¥ng:*\n"
            message += f"‚Ä¢ S·ªë: {phone}\n"
            message += f"‚Ä¢ Gi√°: {price} VND\n"
            message += f"‚Ä¢ H·∫øt h·∫°n: {expired}\n"
        else:
            message += f"‚ö†Ô∏è API kh√¥ng tr·∫£ d·ªØ li·ªáu thu√™ s·ªë.\nPh·∫£n h·ªìi: {rent_result}\n"
    else:
        message += f"‚ùå L·ªói khi thu√™ s·ªë: {rent_result['message']}\n"

    # --- G·ª≠i g·ªôp ---
    send_to_telegram(message)
